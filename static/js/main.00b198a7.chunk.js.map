{"version":3,"sources":["components/WarmupPage.tsx","components/TablePage.tsx","components/CheckInputBlock.tsx","components/FilmPage.tsx","components/NotesPage.tsx","components/PlacesPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WarmupPage","props","useState","count","setCount","useEffect","step","withTimer","timer","setTimeout","clearTimeout","className","htmlFor","textContent","onKeyDown","event","handleKeyDown","id","type","link","href","target","rel","image","src","alt","rows","secretAnswers","TablePage","isSuccess","setIsSuccess","inputOneValue","setinputOneValue","inputTwoValue","setinputTwoValue","renderInput","cellName","callback","index","key","onChange","value","handleInputOneChange","currentTarget","handleInputTwoChange","map","row","rowIndex","cell","cellIndex","onClick","goToNextStep","input2","Number","CheckInputBlock","successText","goNext","successButtonText","checkOnEnter","handleChange","inputValue","checkAnswer","checkButtonText","films","name","positions","FilmPage","setInputValue","checkAnswers","film","keyCode","lines","absolutelyWrongAnswer","NotesPage","test","line","coords","PlacesPage","coord","warmupSteps","answer","warmupStepsNumber","length","App","globalStep","setGlobalStep","warmupStep","setWarmupStep","stepNumber","renderPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00b198a7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { IStepObject, THandleKeyDown } from './../App';\r\n\r\ninterface IProps {\r\n    step: IStepObject;\r\n    handleKeyDown: THandleKeyDown;\r\n}\r\n\r\nconst WarmupPage = (props: IProps) => {\r\n    const [count, setCount] = useState(60);\r\n\r\n    useEffect(() => {\r\n        if (!count) return;\r\n        if (props.step.withTimer) {\r\n            const timer = setTimeout(() => {\r\n                setCount(count - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n                <label \r\n                    htmlFor=\"welcomepage-input\" \r\n                    className=\"content_label\">\r\n                        {props.step.textContent}\r\n                </label>\r\n                <input onKeyDown={(event) => {\r\n                    if (props.step.withTimer) {\r\n                        if (count) {\r\n                            setCount(count * 2);\r\n                        } else {\r\n                            props.handleKeyDown(event);\r\n                        }\r\n                    } else {\r\n                        props.handleKeyDown(event);\r\n                    }\r\n                }} id=\"welcomepage-input\" type=\"text\" className=\"content_input\"/>\r\n                {props.step.link \r\n                && <p>\r\n                        <a href={props.step.link} target=\"_blank\" rel=\"noopener noreferrer\">Клик</a>\r\n                    </p>}\r\n                {props.step.image \r\n                    && <p>\r\n                        <img src={props.step.image} alt=\"Какой-то мемный клоун\"/>\r\n                    </p>}\r\n                {props.step.withTimer\r\n                    && <p>{count}</p>}\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default WarmupPage;","import React, { useState } from 'react';\r\nimport { THandleCheck, THandleChange } from './../App';\r\n\r\ninterface IProps {\r\n    goToNextStep: THandleCheck;\r\n}\r\n\r\nconst rows = [\r\n    [9, 7, 5, 6, 1],\r\n    [4, 6, 5, 6, 7],\r\n    [5, 'keyNumber1', 'keyNumber2', 7, 6],\r\n    [4, 5, 6, 8, 5],\r\n    [6, 8, 4, 1, 9]\r\n];\r\n\r\nconst secretAnswers = {\r\n    answer1: 2,\r\n    answer2: 8,\r\n};\r\n\r\nconst TablePage = (props: IProps) => {\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [inputOneValue, setinputOneValue] = useState('');\r\n    const [inputTwoValue, setinputTwoValue] = useState('');\r\n\r\n    function renderInput(cellName: string, callback: THandleChange, index: number) {\r\n        return (\r\n            <div key={`cell${index}`} className=\"table_cell\">\r\n                <input onChange={callback} value={cellName} type=\"text\" className=\"cell_input\"/>\r\n            </div>\r\n        ) \r\n    }\r\n\r\n    function checkAnswers(input1: string, input2: string,) {\r\n        if (Number(input1) === secretAnswers.answer1\r\n            && Number(input2) === secretAnswers.answer2) {\r\n                setIsSuccess(true);\r\n        } else {\r\n            setinputOneValue('');\r\n            setinputTwoValue('');\r\n        }\r\n    }\r\n\r\n    function handleInputOneChange(event:React.ChangeEvent<HTMLInputElement>): void {\r\n        setinputOneValue(event.currentTarget.value);\r\n    }\r\n\r\n    function handleInputTwoChange(event:React.ChangeEvent<HTMLInputElement>): void {\r\n        setinputTwoValue(event.currentTarget.value);\r\n    }\r\n       \r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"table\">\r\n                {rows.map((row, rowIndex) => {\r\n                    return <div key={`row${rowIndex}`} className=\"table_row\">\r\n                        {row.map((cell, cellIndex) => {\r\n                            if (typeof cell === 'string') {\r\n                                if (cell === 'keyNumber1') return renderInput(inputOneValue, handleInputOneChange, cellIndex);\r\n                                if (cell === 'keyNumber2') return renderInput(inputTwoValue, handleInputTwoChange, cellIndex);\r\n                                return '';\r\n                            } else {\r\n                                return <div key={`cell${cellIndex}`} className=\"table_cell\">{cell}</div>\r\n                            }\r\n                        })}\r\n                    </div> \r\n                })}\r\n            </div>\r\n            {isSuccess \r\n            ? <>\r\n                <p>Твой подарок белка спрятала в Венеции</p>\r\n                <button onClick={props.goToNextStep} className=\"button success_button\">\r\n                    Вперед\r\n                </button>\r\n            </>\r\n            : <button onClick={() => {\r\n                checkAnswers(inputOneValue, inputTwoValue);\r\n            }} className=\"button checking_button\">\r\n                Проверить\r\n            </button>\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TablePage;","import React from 'react';\r\nimport { THandleCheck, THandleChange, THandleKeyDown } from '../App';\r\n\r\ninterface IProps {\r\n    isSuccess: boolean;\r\n    successText: string;\r\n    successButtonText?: string;\r\n    checkAnswer: THandleCheck;\r\n    handleChange: THandleChange;\r\n    goNext: THandleCheck;\r\n    checkOnEnter:THandleKeyDown;\r\n    checkButtonText?: string;\r\n    inputValue: string;\r\n}\r\n\r\nconst CheckInputBlock = (props: IProps) => {\r\n    return (\r\n        <>\r\n            {props.isSuccess\r\n            ? <div className=\"buttonBlock success\">\r\n                <span className=\"success_text\">\r\n                    {props.successText}\r\n                </span>\r\n                <button onClick={props.goNext} className=\"button success_button\">\r\n                    {props.successButtonText || 'Далее'}\r\n                </button>\r\n            </div>\r\n            : <div className=\"buttonBlock checking\">\r\n                <input\r\n                    onKeyDown={props.checkOnEnter}\r\n                    onChange={props.handleChange}\r\n                    type=\"text\" \r\n                    className=\"checking_input\"\r\n                    value={props.inputValue}\r\n                />\r\n                <button onClick={props.checkAnswer} className=\"button checking_button\">\r\n                    {props.checkButtonText || 'Проверить'}\r\n                </button>\r\n            </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CheckInputBlock;","import React, { useState } from 'react';\r\nimport CheckInputBlock from './CheckInputBlock';\r\nimport { THandleChange, THandleCheck, THandleKeyDown } from './../App';\r\n\r\ninterface IProps {\r\n    goToNextStep: THandleCheck;\r\n}\r\n\r\nconst films = [\r\n    {\r\n        name: 'これは人々ではありませんか？ これは人よりも悪いです。 これらは街で最高の人です',\r\n        positions: '[7,8,9,12]'\r\n    },\r\n\r\n    {\r\n        name: '私の清廉潔白、時間内に裏切ることは裏切ることではありません。 これは予見可能です！',\r\n        positions: '[1,2,3]'\r\n    },\r\n\r\n    {\r\n        name: 'ある人が集めたものは、別の人が常に作ることができます',\r\n        positions: '[2,5,6,8]'\r\n    },\r\n\r\n    {\r\n        name: '知的な顔はまだ知性の兆候ではありません。 世界のすべてのナンセンスは、この表現を顔に託しています。.. 笑顔の紳士、笑顔',\r\n        positions: '[5,15]'\r\n    },\r\n\r\n    {\r\n        name: '愛してる.. 深く 深いところで',\r\n        positions: '[1,10,13]'\r\n    },\r\n\r\n    {\r\n        name: '盗んだ、飲んだ、刑務所に！ ロマンス!',\r\n        positions: '[6, 15]'\r\n    },\r\n\r\n    {\r\n        name: '例えば、ロンドンでは、犬は男の友人です。 そして、私たちの家のマネージャーは男の友人です',\r\n        positions: '[1,3,4,6,11,14,16,17]'\r\n    },\r\n];\r\n\r\nconst absolutelyWrongAnswer = 'カーラ|チャールズ';\r\nconst nextTaskButtonText = 'さらに';\r\nconst checkButtonText = '確認';\r\nconst successText = '文字。';\r\n\r\nconst FilmPage = (props: IProps) => {\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange: THandleChange = (event) => {\r\n        setInputValue(event.currentTarget.value);\r\n    }\r\n\r\n    const handleKeyDown: THandleKeyDown = (event) => {\r\n        const enterKeyCode = 13;\r\n        if (event.keyCode === enterKeyCode) {\r\n            checkAnswers();\r\n        }\r\n    }\r\n\r\n    const checkAnswers: THandleCheck = () => {\r\n        if (inputValue === absolutelyWrongAnswer) {\r\n            setIsSuccess(true);\r\n        }\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {films.map((film, index) => {\r\n                return <p className=\"film\" key={`film${index}`}>\r\n                    {film.name}\r\n                    <br></br>\r\n                    <span className=\"film_addition\">{film.positions}</span>\r\n                </p>\r\n            })}\r\n            <CheckInputBlock \r\n                isSuccess={isSuccess} \r\n                successText={successText}\r\n                inputValue={inputValue}\r\n                handleChange={handleInputChange}\r\n                successButtonText={nextTaskButtonText}\r\n                checkButtonText={checkButtonText}\r\n                checkAnswer={checkAnswers}\r\n                goNext={props.goToNextStep}\r\n                checkOnEnter={handleKeyDown}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilmPage;","import React, { useState } from 'react';\r\nimport { THandleChange, THandleCheck, THandleKeyDown } from './../App';\r\nimport CheckInputBlock from './CheckInputBlock';\r\n\r\ninterface IProps {\r\n    goToNextStep: THandleCheck;\r\n}\r\n\r\nconst lines = [\r\n    'Поляк на Поляне Сидел',\r\n    'Дорога - Мимолетная Редька-Динозавр',\r\n    'Подорожник Синица Доела',\r\n    'Минутный Переезд в Одинцово',\r\n    'Сидоренко Коляску Умиротворил',\r\n    'Поребрик-Диван Заминировал Рельсы-Придирки',\r\n    'Дороро Подорвал Понтисион',\r\n    'Землянин Помигал Смиту',\r\n    'Соленья Уминает Ребрант',\r\n    'Дмитрий + Михаил = Рейд на Диониса',\r\n    'Подошел, Посидел, вот Поляк!'\r\n];\r\n\r\nconst absolutelyWrongAnswer = /aladdin|аладдин/i;\r\nconst successText = 'Подарок ближе, чем ты думала';\r\n\r\nconst NotesPage = (props: IProps) => {\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange: THandleChange = (event) => {\r\n        setInputValue(event.currentTarget.value);\r\n    }\r\n\r\n    const handleKeyDown: THandleKeyDown = (event) => {\r\n        const enterKeyCode = 13;\r\n        if (event.keyCode === enterKeyCode) {\r\n            checkAnswers();\r\n        }\r\n    }\r\n\r\n    const checkAnswers: THandleCheck = () => {\r\n        if (absolutelyWrongAnswer.test(inputValue)) {\r\n            setIsSuccess(true);\r\n        }\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {lines.map((line, index) => {\r\n                return <p className=\"line\" key={`line${index}`}>{line}</p>\r\n            })}\r\n            <CheckInputBlock \r\n                isSuccess={isSuccess}\r\n                inputValue={inputValue}\r\n                successText={successText}\r\n                handleChange={handleInputChange}\r\n                checkAnswer={checkAnswers}\r\n                goNext={props.goToNextStep}\r\n                checkOnEnter={handleKeyDown}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotesPage;","import React, { useState } from 'react';\r\nimport { THandleChange, THandleCheck, THandleKeyDown } from './../App';\r\nimport CheckInputBlock from './CheckInputBlock';\r\n\r\ninterface IProps {\r\n    goToNextStep: THandleCheck;\r\n}\r\n\r\nconst coords = [\r\n    'Японский астроном Masahiro Koishikawa открыл новый астероид 5751 Zao',\r\n    'Секстилий, 29 дней',\r\n    'И марганец, и кадр, и Вселенная',\r\n    'Малая Пироговская ул., 8, Москва, 119435 [The-]',\r\n    'Большая Серпуховская ул., 14/13, строение 1, 3 этаж. офис 38, Москва, 115093 [?-forma]',\r\n    'Сущевская ул., 19 строение 4, Москва, 127055 [Pho ? Quoc Su]',\r\n    '2-й Донской проезд, 10с4 [?302.ru]'\r\n];\r\n\r\nconst absolutelyWrongAnswer = /куница|юл(ька|ёк|яка|ёнок|я|ия)/i;\r\nconst successText = 'Подарок съел Ктулху';\r\n\r\nconst PlacesPage = (props: IProps) => {\r\n    const [isSuccess, setIsSuccess] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange: THandleChange = (event) => {\r\n        setInputValue(event.currentTarget.value);\r\n    }\r\n\r\n    const handleKeyDown: THandleKeyDown = (event) => {\r\n        const enterKeyCode = 13;\r\n        if (event.keyCode === enterKeyCode) {\r\n            checkAnswers();\r\n        }\r\n    }\r\n\r\n    const checkAnswers: THandleCheck = () => {\r\n        if (absolutelyWrongAnswer.test(inputValue)) {\r\n            setIsSuccess(true);\r\n        }\r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {coords.map((coord, index) => {\r\n                return <p className=\"line\" key={`line${index}`}>{coord}</p>\r\n            })}\r\n            <CheckInputBlock \r\n                isSuccess={isSuccess}\r\n                inputValue={inputValue}\r\n                successText={successText}\r\n                handleChange={handleInputChange}\r\n                checkAnswer={checkAnswers}\r\n                goNext={props.goToNextStep}\r\n                checkOnEnter={handleKeyDown}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlacesPage;","import React, { useState } from 'react';\nimport WarmupPage from './components/WarmupPage';\nimport './App.css';\nimport TablePage from './components/TablePage';\nimport FilmPage from './components/FilmPage';\nimport NotesPage from './components/NotesPage';\nimport PlacesPage from './components/PlacesPage';\n\nexport interface IStepObject {\n    textContent: string;\n    answer: RegExp;\n    link?: string;\n    image?: string;\n    withTimer?: boolean;\n}\n\nexport type THandleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => void;\nexport type THandleCheck = () => void;\nexport type THandleChange = (event:React.ChangeEvent<HTMLInputElement>) => void;\n\nconst warmupSteps: Array<IStepObject> = [\n    {\n        textContent: 'Готовы начать?',\n        answer: /да/i,\n    },\n    {\n        textContent: 'Прямо сейчас?', \n        answer: /да/i,\n    },\n    {\n        textContent: 'Точно?', \n        answer: /да/i,\n    },\n    {\n        textContent: 'Отлично. Первое задание - смотреть в окно 1 час', \n        answer: /.+/,\n    },\n    {\n        textContent: 'О чем мы забыли?', \n        answer: /(о\\s)?терпени(и|е)/i,\n        link: 'https://www.youtube.com/watch?v=K82vpN3PKK0'\n    },\n\n    {\n        textContent: 'Проверим: ничего не пиши, пока не будет 0', \n        answer: /.+/i,\n        withTimer: true\n    },\n    {\n        textContent: 'Подождали и будет. И так правила: в консоль не смотреть, в коде не рыться. Понятно?', \n        answer: /да|так точно|хорошо|ок/i\n    },\n    {\n        textContent: 'Поехали. Ой, а это кто?',\n        answer: /пипо|pepe|peepo(-|\\s)?клоун|clown/i,\n        image: 'https://s.tcdn.co/c7b/1c0/c7b1c0ac-92db-49d1-8d62-e527476ccd96/1.png'\n    },\n    {\n        textContent: '.мотевто иничоп ,тскет ламолс от-отк ястежаК',\n        answer: /юнич|починил(а)?/i\n    },\n    {\n        textContent: 'Спасибо! Пипо любит шутить, но он не злобный, как тот маг из Гарри Поттера',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Ой, извини, я отходил, кто там был?',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Кто кто?',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Ты написал с ошибкой',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Опять. Будь, пожалуйста, внимательнее. Исправь',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Хм...а теперь в последнием слове',\n        answer: /волан(-|\\s)де(-|\\s)морт/i\n    },\n    {\n        textContent: 'Ладно, ладно. 4 загадки, все такое. Поехали?',\n        answer: /да|го|наконец-то|поехали/i\n    },\n    {\n        textContent: 'П.С. подсказок не будет, даже ошибки не покажут',\n        answer: /.+/i\n    },\n];\nconst warmupStepsNumber = warmupSteps.length - 1;\n\nconst App = () => {\n    const [globalStep, setGlobalStep] = useState(0);\n    const [warmupStep, setWarmupStep] = useState(0);\n\n    const handleKeyDown: THandleKeyDown = (event) => {\n        const enterKeyCode = 13;\n        if (event.keyCode === enterKeyCode) {\n            if (warmupSteps[warmupStep].answer.test(event.currentTarget.value)) {\n                if (warmupStep === warmupStepsNumber) {\n                    setGlobalStep(globalStep + 1);\n                } else {\n                    setWarmupStep(warmupStep + 1);\n                }\n            }\n            event.currentTarget.value = '';\n        }\n    };\n\n    const goToNextStep: THandleCheck = () => {\n      setGlobalStep(globalStep + 1);\n    }\n\n    function renderPage(stepNumber: number) {\n        switch (stepNumber) {\n            case 0:\n                return <WarmupPage\n                    step={warmupSteps[warmupStep]}\n                    handleKeyDown={handleKeyDown}\n                />\n            case 1:\n                return <TablePage goToNextStep={goToNextStep}/>\n            case 2:\n                return <NotesPage goToNextStep={goToNextStep}/>;\n            case 3:\n                return <FilmPage goToNextStep={goToNextStep}/>\n            case 4:\n                return <PlacesPage goToNextStep={goToNextStep}/>\n            default:\n                return <div>\n                    <img src=\"https://thumbs.gfycat.com/YearlyAliveKilldeer-size_restricted.gif\" alt=\"victory\"/>\n                </div>;\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            {renderPage(globalStep)}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}